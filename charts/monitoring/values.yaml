# Universal monitoring stack for all environments
# Monitors: dev, staging, prod, argocd, kube-system, etc.

kube-prometheus-stack:
  # Grafana configuration
  grafana:
    enabled: true
    adminPassword: "admin123"  # Will be overridden in env values
    
    service:
      type: ClusterIP
      
    persistence:
      enabled: true
      size: 2Gi
      
    # Pre-configured dashboards
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

    # Useful plugins
    plugins:
      - grafana-piechart-panel
      - grafana-worldmap-panel
      - grafana-polystat-panel

  # Prometheus configuration  
  prometheus:
    enabled: true
    
    prometheusSpec:
      retention: 15d
      retentionSize: 30GB
      
      # Monitor ALL namespaces
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      
      # Storage
      storageSpec:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 15Gi

      # Scrape configs for all our applications
      additionalScrapeConfigs:
        # Microservices in all environments
        - job_name: 'microservices-all-envs'
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names: ['dev', 'staging', 'prod']  # All env namespaces
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            # Add environment label
            - source_labels: [__meta_kubernetes_namespace]
              target_label: environment
            - source_labels: [__meta_kubernetes_pod_name]
              target_label: pod
            - source_labels: [__meta_kubernetes_pod_container_name]
              target_label: container

        # ArgoCD metrics
        - job_name: 'argocd'
          kubernetes_sd_configs:
            - role: service
              namespaces:
                names: ['argocd']
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
              action: keep
              regex: argocd-metrics
            - source_labels: [__meta_kubernetes_service_name]
              target_label: service

  # AlertManager
  alertmanager:
    enabled: true
    
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 2Gi

  # Enable all exporters
  nodeExporter:
    enabled: true
    
  kubeStateMetrics:
    enabled: true
    
  # Enable comprehensive alerting rules
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      general: true
      k8s: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      node: true
      prometheus: true

# Ingress configuration (будет включен в env values)
ingress:
  enabled: false
  grafana:
    path: /grafana
  prometheus:
    path: /prometheus  
  alertmanager:
    path: /alertmanager

# ServiceMonitor configuration
serviceMonitor:
  enabled: true
